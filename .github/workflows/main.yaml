name: Infrastructure

on:
    pull_request:
    push:
        branches:
            - main

jobs:
    Infrastructure-Cost:
        permissions:
            id-token: write
            contents: read
            pull-requests: write
        if: github.event_name == 'pull_request'
        uses: The-Wild-West/Shareable-Workflows/.github/workflows/terraform-cost.yaml@main
        secrets:
            admin_account_id: ${{ secrets.ADMIN_ACCOUNT_ID }}
            role_name: ${{ secrets.OIDC_ROLE_PREFIX }}
    Infrastructure-Deployment:
        permissions:
            id-token: write
            contents: read
        if: github.event_name == 'push' || github.event.pull_request.merged == true
        uses: The-Wild-West/Shareable-Workflows/.github/workflows/terraform-apply.yaml@main
        with:
            environment: 'root'
        secrets:
            admin_account_id: ${{ secrets.ADMIN_ACCOUNT_ID }}
            role_name: ${{ secrets.OIDC_ROLE_PREFIX }}
    Ansible-Configuration:
        needs: Infrastructure-Deployment
        permissions:
            id-token: write
            contents: read
        runs-on: ubuntu-latest
        if: github.event_name == 'push' || github.event.pull_request.merged == true
        steps:
            - name: AWS Login - Management Environment
              uses: aws-actions/configure-aws-credentials@v4
              with:
                role-to-assume: arn:aws:iam::${{ secrets.ADMIN_ACCOUNT_ID }}:role/${{ secrets.OIDC_ROLE_PREFIX }}
                aws-region: us-east-1
            - name: Copy Inventory Files
              shell: bash
              run: |
                INSTANCE_ID=$(echo '${{ needs.Infrastructure-Deployment.outputs.all_outputs_json }}' | jq -r '.control_node_id.value')
                echo "Using instance ID: $INSTANCE_ID"
                
                #wait until the control node is running
                aws ec2 wait instance-running --instance-ids "$INSTANCE_ID"

                #describe the instance status
                status=$(aws ec2 describe-instance-status --instance-ids "$INSTANCE_ID" \
                | jq -r '.InstanceStatuses[0].InstanceStatus.Status')
                
                count=0
                #wait for status to be ok
                while [[ "$status" != "ok" ]]; do
                    status=$(aws ec2 describe-instance-status --instance-ids "$INSTANCE_ID" \
                    | jq -r '.InstanceStatuses[0].InstanceStatus.Status')
                    sleep 10
                    ((count++))
                    if [[ $count -ge 10 ]]; then
                        break
                    fi
                done

                aws ssm send-command \
                --instance-ids "$INSTANCE_ID" \
                --document-name "AWS-RunShellScript" \
                --parameters '{"commands":["rm -rf /home/ubuntu/ansible","mkdir -p /home/ubuntu/ansible","cd /home/ubuntu/ansible","git clone https://github.com/The-Wild-West/Account-Infrastructure-Orchestration.git .","sudo rm -rf /etc/ansible/inventory","sudo cp -r inventory /etc/ansible/"]}' \
                --region us-east-1  
              
    